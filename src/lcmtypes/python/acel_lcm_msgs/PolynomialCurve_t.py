"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import acel_lcm_msgs.PolyCurveSegment_t

import acel_lcm_msgs.TimeStamp_t

import acel_lcm_msgs.WayPoint_t

class PolynomialCurve_t(object):
    __slots__ = ["seg_num", "segments", "wp_num", "waypoints", "start_time", "trajectory_id", "scaling_factor"]

    def __init__(self):
        self.seg_num = 0
        self.segments = []
        self.wp_num = 0
        self.waypoints = []
        self.start_time = acel_lcm_msgs.TimeStamp_t()
        self.trajectory_id = 0
        self.scaling_factor = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(PolynomialCurve_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.seg_num))
        for i0 in range(self.seg_num):
            assert self.segments[i0]._get_packed_fingerprint() == acel_lcm_msgs.PolyCurveSegment_t._get_packed_fingerprint()
            self.segments[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.wp_num))
        for i0 in range(self.wp_num):
            assert self.waypoints[i0]._get_packed_fingerprint() == acel_lcm_msgs.WayPoint_t._get_packed_fingerprint()
            self.waypoints[i0]._encode_one(buf)
        assert self.start_time._get_packed_fingerprint() == acel_lcm_msgs.TimeStamp_t._get_packed_fingerprint()
        self.start_time._encode_one(buf)
        buf.write(struct.pack(">qf", self.trajectory_id, self.scaling_factor))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PolynomialCurve_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PolynomialCurve_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = PolynomialCurve_t()
        self.seg_num = struct.unpack(">q", buf.read(8))[0]
        self.segments = []
        for i0 in range(self.seg_num):
            self.segments.append(acel_lcm_msgs.PolyCurveSegment_t._decode_one(buf))
        self.wp_num = struct.unpack(">i", buf.read(4))[0]
        self.waypoints = []
        for i0 in range(self.wp_num):
            self.waypoints.append(acel_lcm_msgs.WayPoint_t._decode_one(buf))
        self.start_time = acel_lcm_msgs.TimeStamp_t._decode_one(buf)
        self.trajectory_id, self.scaling_factor = struct.unpack(">qf", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if PolynomialCurve_t in parents: return 0
        newparents = parents + [PolynomialCurve_t]
        tmphash = (0xb6932b5031a4ffe5+ acel_lcm_msgs.PolyCurveSegment_t._get_hash_recursive(newparents)+ acel_lcm_msgs.WayPoint_t._get_hash_recursive(newparents)+ acel_lcm_msgs.TimeStamp_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if PolynomialCurve_t._packed_fingerprint is None:
            PolynomialCurve_t._packed_fingerprint = struct.pack(">Q", PolynomialCurve_t._get_hash_recursive([]))
        return PolynomialCurve_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

