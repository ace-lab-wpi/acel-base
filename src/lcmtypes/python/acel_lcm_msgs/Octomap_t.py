"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class Octomap_t(object):
    __slots__ = ["binary", "id", "resolution", "data_size", "data"]

    def __init__(self):
        self.binary = False
        self.id = ""
        self.resolution = 0.0
        self.data_size = 0
        self.data = []

    def encode(self):
        buf = BytesIO()
        buf.write(Octomap_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.binary))
        __id_encoded = self.id.encode('utf-8')
        buf.write(struct.pack('>I', len(__id_encoded)+1))
        buf.write(__id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">di", self.resolution, self.data_size))
        buf.write(struct.pack('>%db' % self.data_size, *self.data[:self.data_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Octomap_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Octomap_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Octomap_t()
        self.binary = bool(struct.unpack('b', buf.read(1))[0])
        __id_len = struct.unpack('>I', buf.read(4))[0]
        self.id = buf.read(__id_len)[:-1].decode('utf-8', 'replace')
        self.resolution, self.data_size = struct.unpack(">di", buf.read(12))
        self.data = struct.unpack('>%db' % self.data_size, buf.read(self.data_size))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Octomap_t in parents: return 0
        tmphash = (0xe71a0720e69af8af) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Octomap_t._packed_fingerprint is None:
            Octomap_t._packed_fingerprint = struct.pack(">Q", Octomap_t._get_hash_recursive([]))
        return Octomap_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

