"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class UAVTrajectoryPoint_t(object):
    __slots__ = ["point_empty", "positions", "velocities", "accelerations", "jerks", "yaw", "yaw_rate", "duration"]

    def __init__(self):
        self.point_empty = False
        self.positions = [ 0.0 for dim0 in range(3) ]
        self.velocities = [ 0.0 for dim0 in range(3) ]
        self.accelerations = [ 0.0 for dim0 in range(3) ]
        self.jerks = [ 0.0 for dim0 in range(3) ]
        self.yaw = 0.0
        self.yaw_rate = 0.0
        self.duration = 0

    def encode(self):
        buf = BytesIO()
        buf.write(UAVTrajectoryPoint_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.point_empty))
        buf.write(struct.pack('>3f', *self.positions[:3]))
        buf.write(struct.pack('>3f', *self.velocities[:3]))
        buf.write(struct.pack('>3f', *self.accelerations[:3]))
        buf.write(struct.pack('>3f', *self.jerks[:3]))
        buf.write(struct.pack(">ffq", self.yaw, self.yaw_rate, self.duration))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != UAVTrajectoryPoint_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return UAVTrajectoryPoint_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = UAVTrajectoryPoint_t()
        self.point_empty = bool(struct.unpack('b', buf.read(1))[0])
        self.positions = struct.unpack('>3f', buf.read(12))
        self.velocities = struct.unpack('>3f', buf.read(12))
        self.accelerations = struct.unpack('>3f', buf.read(12))
        self.jerks = struct.unpack('>3f', buf.read(12))
        self.yaw, self.yaw_rate, self.duration = struct.unpack(">ffq", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if UAVTrajectoryPoint_t in parents: return 0
        tmphash = (0x519c825573525022) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if UAVTrajectoryPoint_t._packed_fingerprint is None:
            UAVTrajectoryPoint_t._packed_fingerprint = struct.pack(">Q", UAVTrajectoryPoint_t._get_hash_recursive([]))
        return UAVTrajectoryPoint_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

